/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.guimijnenveger;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

/**
 *
 * @author Gebruiker
 */
public class GUI extends javax.swing.JFrame implements ActionListener {
    JPanel textPanel;
    JPanel buttonPanel;
    JButton[][] buttons;
    JLabel textField;
    JFrame frame;
    Veld veld;
    
    int bombsLeft;
   

    /**
     * Creates new form MijnenVeld
     */
    public GUI(int numRows, int numColumns, int numBombs)  {
        initComponents();
        bombsLeft = numBombs;
        
        frame = new JFrame();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(numColumns, numRows));
        
        veld = new Veld(numRows, numColumns, numBombs);
        
        textPanel = new JPanel();
        textPanel.setVisible(true);
        textPanel.setBackground(Color.GRAY);
        
        textField = new JLabel();
        textField.setHorizontalAlignment(JLabel.CENTER);
        textField.setForeground(Color.black);
        textField.setFont(new Font("Mv Boli", Font.BOLD, 24));
        textField.setText("Bombs " + bombsLeft);
        
        
        
        buttons = new JButton[numColumns][numRows];
        for (int i = 0; i < buttons.length; i++){
            for (int x = 0; x < buttons[0].length; x++){
                buttons[i][x] = new JButton();
                buttons[i][x].setFocusable(false);
                buttons[i][x].setText("");
                buttons[i][x].addActionListener(this);
                buttons[i][x].addMouseListener(new RightClicker());
                buttonPanel.add(buttons[i][x]);
                
            }
        }
        

        frame.add(textPanel, BorderLayout.NORTH);
        textPanel.add(textField);
        frame.add(buttonPanel);
        frame.setSize(570, 570);
        frame.revalidate();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        int numColumns = 10;
        int numRows = 10;
        int numBombs = 10;
        GUI mijnenVeld = new GUI(numRows, numColumns, numBombs);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
         for (int i = 0; i < buttons.length; i++){
            for (int x = 0; x < buttons[0].length; x++){
                if(isClickable(i, x)){
                    if (e.getSource() == buttons[i][x] && veld.isBomb(i, x)){
                        System.out.println("This is a bomb");
                        buttons[i][x].setText("B");
                        buttons[i][x].setForeground(Color.red);
                        textField.setText("You Lost!!");
                        getBombs();
                        return;
                    } else if (e.getSource() == buttons[i][x]) {
                        if(buttons[i][x].getText().equals("P")){
                            bombsLeft++;
                            textField.setText("Bombs " + bombsLeft);
                        }
                        buttons[i][x].setText("" + veld.checkBombsAround(i, x));
                        buttons[i][x].setEnabled(false);
                        if(veld.checkBombsAround(i, x) == 0){
                            for(int y = -1; y <= 1; y++){
                                for(int j = -1; j <= 1; j++){
                                    if (isClickable(i + y, x + j) && !buttons[i + y][x + j].getText().equals("P")){
                                        buttons[i + y][x + j].doClick();
                                    }
                                }   
                            } 
                        }           
                    }                
                }
            }
        }
        checkVictory(); 
    }
    
    boolean isClickable(int row, int column) {
        if(row < buttons.length && row >= 0 && column < buttons[0].length && column >= 0){
            return true;
        } else {
            return false;
        }
    }

    private void getBombs() {
        for(int i = 0; i < buttons.length; i++){
            for (int x = 0; x < buttons[0].length; x++){
                if (veld.isBomb(i, x)){
                    buttons[i][x].setText("B");
                    buttons[i][x].setForeground(Color.red);
                }
            }    
        }
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                frame.dispose();
            }
        });
        timer.start();
    }

    private void checkVictory() {
        for(int i = 0; i < buttons.length; i++){
            for (int x = 0; x < buttons[0].length; x++){
                if (buttons[i][x].getText().equals("")){
                    return;
                }            
            }    
        }
        for(int i = 0; i < buttons.length; i++){
            for (int x = 0; x < buttons[0].length; x++){
                if (!veld.isBomb(i, x) &&  buttons[i][x].getText().equals("P")){
                   textField.setText("You placed too many flags");
                   return;
                }
            }    
        }
        textField.setText("Congratulations! You Won!!");
    }

   private class RightClicker extends MouseAdapter {
        public void mouseClicked( MouseEvent e ) {
            if ((e.getModifiers() & InputEvent.BUTTON3_MASK) != 0){
               for (int i = 0; i < buttons.length; i++){
                    for (int x = 0; x < buttons[0].length; x++){                
                        if (e.getSource() == buttons[i][x] && buttons[i][x].getText().equals("")){
                            buttons[i][x].setText("P");
                            buttons[i][x].setForeground(Color.green);
                            bombsLeft--;
                            textField.setText("Bombs " + bombsLeft);
                            checkVictory();

                            return;
                        } else if (e.getSource() == buttons[i][x] && buttons[i][x].getText().equals("P")){
                            buttons[i][x].setText("");
                            bombsLeft++;
                            textField.setText("Bombs " + bombsLeft);
                        }
                    }
                } 
            }
            
        }
    }    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
